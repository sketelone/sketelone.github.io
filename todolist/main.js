(()=>{"use strict";var e={978:(e,n,t)=>{t.d(n,{Z:()=>h});var r=t(537),a=t.n(r),i=t(645),o=t.n(i),l=t(667),d=t.n(l),s=new URL(t(621),t.b),u=new URL(t(675),t.b),c=new URL(t(256),t.b),m=o()(a()),f=d()(s),A=d()(u),p=d()(c);m.push([e.id,'@font-face {\n  font-family: "Material Symbols Outlined";\n  font-style: normal;\n  font-weight: 100 700;\n  font-display: block;\n  src: url('+f+') format("woff2");\n}\n.material-symbols-outlined {\n  font-family: "Material Symbols Outlined";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Symbols Rounded";\n  font-style: normal;\n  font-weight: 100 700;\n  font-display: block;\n  src: url('+A+') format("woff2");\n}\n.material-symbols-rounded {\n  font-family: "Material Symbols Rounded";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Symbols Sharp";\n  font-style: normal;\n  font-weight: 100 700;\n  font-display: block;\n  src: url('+p+') format("woff2");\n}\n.material-symbols-sharp {\n  font-family: "Material Symbols Sharp";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n',"",{version:3,sources:["webpack://./node_modules/material-symbols/index.css"],names:[],mappings:"AAAA;EACE,wCAAwC;EACxC,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;EACnB,4DAA6D;AAC/D;AACA;EACE,wCAAwC;EACxC,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B;;AAEA;EACE,uCAAuC;EACvC,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;EACnB,4DAA4D;AAC9D;AACA;EACE,uCAAuC;EACvC,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B;;AAEA;EACE,qCAAqC;EACrC,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;EACnB,4DAA0D;AAC5D;AACA;EACE,qCAAqC;EACrC,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B",sourcesContent:['@font-face {\n  font-family: "Material Symbols Outlined";\n  font-style: normal;\n  font-weight: 100 700;\n  font-display: block;\n  src: url("./material-symbols-outlined.woff2") format("woff2");\n}\n.material-symbols-outlined {\n  font-family: "Material Symbols Outlined";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Symbols Rounded";\n  font-style: normal;\n  font-weight: 100 700;\n  font-display: block;\n  src: url("./material-symbols-rounded.woff2") format("woff2");\n}\n.material-symbols-rounded {\n  font-family: "Material Symbols Rounded";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Symbols Sharp";\n  font-style: normal;\n  font-weight: 100 700;\n  font-display: block;\n  src: url("./material-symbols-sharp.woff2") format("woff2");\n}\n.material-symbols-sharp {\n  font-family: "Material Symbols Sharp";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n'],sourceRoot:""}]);const h=m},426:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(537),a=t.n(r),i=t(645),o=t.n(i),l=t(667),d=t.n(l),s=new URL(t(176),t.b),u=o()(a()),c=d()(s);u.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n}\n\n@font-face {\n    font-family: 'Mr Bedfort';\n    src: url("+c+") format('truetype')\n}\n\nbody {\n    background-color: rgb(236, 241, 233);\n    font-family:Arial, Helvetica, sans-serif;\n    font-size: 20px;\n    justify-items: center;\n    text-align: center;\n}\n\n.page {\n    height: 100vh;\n    display: grid;\n    grid-template: minmax(200px, auto) auto 1fr 80px / 350px minmax(700px, 1fr);\n}\n\n.header{\n    display: grid;\n    grid-template-columns: auto 100px;\n    justify-items: center;\n    align-items: center;\n    margin: 10px 0px;\n    padding:30px;\n}\n\n.footer {\n    display: grid;\n    padding: 10px;\n    text-transform: uppercase;\n    font-size: 10px;\n    letter-spacing: 0.3em;\n}\n\nh1 {\n    padding: 20px;\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 72px;\n    font-weight: bolder;\n    line-height:85%;\n}\n\n.sidebar {\n    grid-template-rows: 200px 1fr 100px;\n    display: grid;\n    justify-items: center;\n    padding: 50px;\n    grid-row: 1 / 6;\n    background-color:  rgb(145, 158, 137);\n}\n\n.hide-container {\n    align-self: end;\n    display: grid;\n    grid-template-columns: 40px 1fr;\n    align-items: center;\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 24px;\n}\n\n.container, .add-container{\n    display: grid;\n    align-items: center;\n    gap: 10px;\n    background-color: rgb(241, 233, 241);\n    padding: 20px;\n    text-align:left;\n}\n\n.todo-container {\n    display: grid;\n    gap: 10px;\n}\n\n.todo-input {\n    display: flex;\n    flex-direction: column;\n    margin: 10px;\n}\n\n.add-container {\n    align-items: start;\n}\n\n.todo, .todo-header, .form-todo {\n    display: grid;\n    grid-template-columns: 60px 50px 1fr 220px 60px 60px;\n    align-items: center;\n    background-color: rgb(255, 248, 255);\n    border-radius: 6px;\n    padding: 20px;\n    box-shadow: 0 3px 3px rgba(0,0,0,0.2);\n}\n\n.todo-header {\n    grid-template-columns: 110px 1fr 220px 120px;\n    background-color: rgb(218, 202, 218);\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 36px;\n    font-weight: bolder;\n}\n\n.item-text {\n    display: grid;\n    grid-template-columns: auto 60px;\n}\n\n.item-date {\n    display: grid;\n    grid-template-columns: 160px 60px;\n\n}\n\n.item-notes{\n    grid-column: 3/4;\n    color: rgb(36, 36, 36);\n}\n\n.form-popup {\n    display: none;\n}\n\n.form-todo {\n    grid-template-columns: 1fr 220px 120px;\n\n}\n\ninput {\n    outline: none;\n    border: 1px solid gray;\n    border-radius: 3px;\n    font-size: 16px;\n    height:40px;\n    width: 100%;\n}\n\n.header-input {\n    width: 600px;\n    height: 100px;\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 72px;\n    text-align: center;\n}\n\n.todo-notes {\n    grid-column: 1/3;\n    margin-left: 10px;\n}\n\n.error {\n    height: 20px;\n    display:block;\n    justify-self: center;\n    text-align: center;\n    width:220px;\n    font-size: 10px;\n    letter-spacing: 0.2em;\n    color:red;\n    border: none;\n    text-transform: uppercase;\n    overflow-wrap: break-word;\n    margin-top: 10px;\n}\n\n.notes_error {\n    height: 0px;\n}\n\n.date_error {\n    height: 10px;\n    margin-left:-20px;\n}\n\n.heading_error {\n    width: auto;\n}\n\n.item-date button {\n    justify-self: end;\n}\n\nbutton {\n    background: transparent;\n    border: none;\n    color: black;\n    font-size: 36px;\n    text-align: center;\n    font-weight:bold;\n}\n\nbutton:hover {\n    opacity: 0.7;\n}\n\nbutton[aria-label=\"+\"] {\n    font-style:italic;\n    color: rgb(175, 194, 175);\n}\n\n.header button {\n    font-size: 60px;\n    grid-column: 2/3;\n}\n\n#submit, #close {\n    justify-self: center;\n    align-self: start;\n}\n\nspan.material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n    font-size: 48px;\n    justify-self: start;\n}\n\n.hide-container span.material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n    font-size: 24px;\n}\n\nul {\n    padding: 20px;\n    justify-self: start;\n    list-style:none;\n}\n\nul button {\n    width: 200px;\n    font-size: 24px;\n    text-align: left;\n}\n\n.complete div{\n    text-decoration: line-through;\n    color: gray;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,yBAAyB;IACzB;AACJ;;AAEA;IACI,oCAAoC;IACpC,wCAAwC;IACxC,eAAe;IACf,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,2EAA2E;AAC/E;;AAEA;IACI,aAAa;IACb,iCAAiC;IACjC,qBAAqB;IACrB,mBAAmB;IACnB,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,eAAe;IACf,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,kCAAkC;IAClC,eAAe;IACf,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,mCAAmC;IACnC,aAAa;IACb,qBAAqB;IACrB,aAAa;IACb,eAAe;IACf,qCAAqC;AACzC;;AAEA;IACI,eAAe;IACf,aAAa;IACb,+BAA+B;IAC/B,mBAAmB;IACnB,kCAAkC;IAClC,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,oCAAoC;IACpC,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,oDAAoD;IACpD,mBAAmB;IACnB,oCAAoC;IACpC,kBAAkB;IAClB,aAAa;IACb,qCAAqC;AACzC;;AAEA;IACI,4CAA4C;IAC5C,oCAAoC;IACpC,kCAAkC;IAClC,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,aAAa;IACb,iCAAiC;;AAErC;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,sCAAsC;;AAE1C;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,eAAe;IACf,WAAW;IACX,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,kCAAkC;IAClC,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,oBAAoB;IACpB,kBAAkB;IAClB,WAAW;IACX,eAAe;IACf,qBAAqB;IACrB,SAAS;IACT,YAAY;IACZ,yBAAyB;IACzB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;IACvB,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,oBAAoB;IACpB,iBAAiB;AACrB;;AAEA;IACI,kEAAkE;IAClE,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,kEAAkE;IAClE,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;IAC7B,WAAW;AACf",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n}\n\n@font-face {\n    font-family: 'Mr Bedfort';\n    src: url('./assets/MrBedfort-Regular.ttf') format('truetype')\n}\n\nbody {\n    background-color: rgb(236, 241, 233);\n    font-family:Arial, Helvetica, sans-serif;\n    font-size: 20px;\n    justify-items: center;\n    text-align: center;\n}\n\n.page {\n    height: 100vh;\n    display: grid;\n    grid-template: minmax(200px, auto) auto 1fr 80px / 350px minmax(700px, 1fr);\n}\n\n.header{\n    display: grid;\n    grid-template-columns: auto 100px;\n    justify-items: center;\n    align-items: center;\n    margin: 10px 0px;\n    padding:30px;\n}\n\n.footer {\n    display: grid;\n    padding: 10px;\n    text-transform: uppercase;\n    font-size: 10px;\n    letter-spacing: 0.3em;\n}\n\nh1 {\n    padding: 20px;\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 72px;\n    font-weight: bolder;\n    line-height:85%;\n}\n\n.sidebar {\n    grid-template-rows: 200px 1fr 100px;\n    display: grid;\n    justify-items: center;\n    padding: 50px;\n    grid-row: 1 / 6;\n    background-color:  rgb(145, 158, 137);\n}\n\n.hide-container {\n    align-self: end;\n    display: grid;\n    grid-template-columns: 40px 1fr;\n    align-items: center;\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 24px;\n}\n\n.container, .add-container{\n    display: grid;\n    align-items: center;\n    gap: 10px;\n    background-color: rgb(241, 233, 241);\n    padding: 20px;\n    text-align:left;\n}\n\n.todo-container {\n    display: grid;\n    gap: 10px;\n}\n\n.todo-input {\n    display: flex;\n    flex-direction: column;\n    margin: 10px;\n}\n\n.add-container {\n    align-items: start;\n}\n\n.todo, .todo-header, .form-todo {\n    display: grid;\n    grid-template-columns: 60px 50px 1fr 220px 60px 60px;\n    align-items: center;\n    background-color: rgb(255, 248, 255);\n    border-radius: 6px;\n    padding: 20px;\n    box-shadow: 0 3px 3px rgba(0,0,0,0.2);\n}\n\n.todo-header {\n    grid-template-columns: 110px 1fr 220px 120px;\n    background-color: rgb(218, 202, 218);\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 36px;\n    font-weight: bolder;\n}\n\n.item-text {\n    display: grid;\n    grid-template-columns: auto 60px;\n}\n\n.item-date {\n    display: grid;\n    grid-template-columns: 160px 60px;\n\n}\n\n.item-notes{\n    grid-column: 3/4;\n    color: rgb(36, 36, 36);\n}\n\n.form-popup {\n    display: none;\n}\n\n.form-todo {\n    grid-template-columns: 1fr 220px 120px;\n\n}\n\ninput {\n    outline: none;\n    border: 1px solid gray;\n    border-radius: 3px;\n    font-size: 16px;\n    height:40px;\n    width: 100%;\n}\n\n.header-input {\n    width: 600px;\n    height: 100px;\n    font-family: 'Mr Bedfort', cursive;\n    font-size: 72px;\n    text-align: center;\n}\n\n.todo-notes {\n    grid-column: 1/3;\n    margin-left: 10px;\n}\n\n.error {\n    height: 20px;\n    display:block;\n    justify-self: center;\n    text-align: center;\n    width:220px;\n    font-size: 10px;\n    letter-spacing: 0.2em;\n    color:red;\n    border: none;\n    text-transform: uppercase;\n    overflow-wrap: break-word;\n    margin-top: 10px;\n}\n\n.notes_error {\n    height: 0px;\n}\n\n.date_error {\n    height: 10px;\n    margin-left:-20px;\n}\n\n.heading_error {\n    width: auto;\n}\n\n.item-date button {\n    justify-self: end;\n}\n\nbutton {\n    background: transparent;\n    border: none;\n    color: black;\n    font-size: 36px;\n    text-align: center;\n    font-weight:bold;\n}\n\nbutton:hover {\n    opacity: 0.7;\n}\n\nbutton[aria-label=\"+\"] {\n    font-style:italic;\n    color: rgb(175, 194, 175);\n}\n\n.header button {\n    font-size: 60px;\n    grid-column: 2/3;\n}\n\n#submit, #close {\n    justify-self: center;\n    align-self: start;\n}\n\nspan.material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n    font-size: 48px;\n    justify-self: start;\n}\n\n.hide-container span.material-symbols-outlined {\n    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 48;\n    font-size: 24px;\n}\n\nul {\n    padding: 20px;\n    justify-self: start;\n    list-style:none;\n}\n\nul button {\n    width: 200px;\n    font-size: 24px;\n    text-align: left;\n}\n\n.complete div{\n    text-decoration: line-through;\n    color: gray;\n}"],sourceRoot:""}]);const m=u},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var l=0;l<this.length;l++){var d=this[l][0];null!=d&&(o[d]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),n.push(u))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],l=0;l<e.length;l++){var d=e[l],s=r.base?d[0]+r.base:d[0],u=i[s]||0,c="".concat(s," ").concat(u);i[s]=u+1;var m=t(c),f={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)n[m].references++,n[m].updater(f);else{var A=a(f,r);r.byIndex=l,n.splice(l,0,{identifier:c,updater:A,references:1})}o.push(c)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var l=t(i[o]);n[l].references--}for(var d=r(e,a),s=0;s<i.length;s++){var u=t(i[s]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},621:(e,n,t)=>{e.exports=t.p+"008debed4215f294b10e.woff2"},675:(e,n,t)=>{e.exports=t.p+"99737b6a7d2c00814d8b.woff2"},256:(e,n,t)=>{e.exports=t.p+"d9a94bac00675649d9b2.woff2"},176:(e,n,t)=>{e.exports=t.p+"9bd703974e6e2df90c7a.ttf"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),i=t(569),o=t.n(i),l=t(565),d=t.n(l),s=t(216),u=t.n(s),c=t(589),m=t.n(c),f=t(426),A={};A.styleTagTransform=m(),A.setAttributes=d(),A.insert=o().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=u(),n()(f.Z,A),f.Z&&f.Z.locals&&f.Z.locals;var p=t(978),h={};function g(e,n){var t=n,r=new C(e);return t.push(r),r}function C(e){this.name=e,this.todos=[]}h.styleTagTransform=m(),h.setAttributes=d(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=u(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;var v=[];g("General",v);var y=[];function b(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function w(e){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},w(e)}function x(e){return b(1,arguments),e instanceof Date||"object"===w(e)&&"[object Date]"===Object.prototype.toString.call(e)}function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function E(e){b(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===B(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function I(e){if(b(1,arguments),!x(e)&&"number"!=typeof e)return!1;var n=E(e);return!isNaN(Number(n))}function k(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function T(e,n){b(2,arguments);var t=E(e).getTime(),r=k(n);return new Date(t+r)}function M(e,n){b(2,arguments);var t=k(n);return T(e,-t)}var L=864e5;function S(e){b(1,arguments);var n=1,t=E(e),r=t.getUTCDay(),a=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function D(e){b(1,arguments);var n=E(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=S(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var o=S(i);return n.getTime()>=a.getTime()?t+1:n.getTime()>=o.getTime()?t:t-1}function U(e){b(1,arguments);var n=D(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=S(t);return r}var z=6048e5,N={};function H(){return N}function q(e,n){var t,r,a,i,o,l,d,s;b(1,arguments);var u=H(),c=k(null!==(t=null!==(r=null!==(a=null!==(i=null==n?void 0:n.weekStartsOn)&&void 0!==i?i:null==n||null===(o=n.locale)||void 0===o||null===(l=o.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:u.weekStartsOn)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==t?t:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=E(e),f=m.getUTCDay(),A=(f<c?7:0)+f-c;return m.setUTCDate(m.getUTCDate()-A),m.setUTCHours(0,0,0,0),m}function P(e,n){var t,r,a,i,o,l,d,s;b(1,arguments);var u=E(e),c=u.getUTCFullYear(),m=H(),f=k(null!==(t=null!==(r=null!==(a=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(o=n.locale)||void 0===o||null===(l=o.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==r?r:null===(d=m.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(c+1,0,f),A.setUTCHours(0,0,0,0);var p=q(A,n),h=new Date(0);h.setUTCFullYear(c,0,f),h.setUTCHours(0,0,0,0);var g=q(h,n);return u.getTime()>=p.getTime()?c+1:u.getTime()>=g.getTime()?c:c-1}function Y(e,n){var t,r,a,i,o,l,d,s;b(1,arguments);var u=H(),c=k(null!==(t=null!==(r=null!==(a=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(o=n.locale)||void 0===o||null===(l=o.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1),m=P(e,n),f=new Date(0);f.setUTCFullYear(m,0,c),f.setUTCHours(0,0,0,0);var A=q(f,n);return A}var j=6048e5;function W(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const _=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return W("yy"===n?r%100:r,n.length)},O=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):W(t+1,2)},R=function(e,n){return W(e.getUTCDate(),n.length)},F=function(e,n){return W(e.getUTCHours()%12||12,n.length)},Z=function(e,n){return W(e.getUTCHours(),n.length)},G=function(e,n){return W(e.getUTCMinutes(),n.length)},Q=function(e,n){return W(e.getUTCSeconds(),n.length)},X=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return W(Math.floor(r*Math.pow(10,t-3)),n.length)};var J={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return _(e,n)},Y:function(e,n,t,r){var a=P(e,r),i=a>0?a:1-a;return"YY"===n?W(i%100,2):"Yo"===n?t.ordinalNumber(i,{unit:"year"}):W(i,n.length)},R:function(e,n){return W(D(e),n.length)},u:function(e,n){return W(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return W(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return W(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return O(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return W(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var a=function(e,n){b(1,arguments);var t=E(e),r=q(t,n).getTime()-Y(t,n).getTime();return Math.round(r/j)+1}(e,r);return"wo"===n?t.ordinalNumber(a,{unit:"week"}):W(a,n.length)},I:function(e,n,t){var r=function(e){b(1,arguments);var n=E(e),t=S(n).getTime()-U(n).getTime();return Math.round(t/z)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):W(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):R(e,n)},D:function(e,n,t){var r=function(e){b(1,arguments);var n=E(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),a=t-r;return Math.floor(a/L)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):W(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return W(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return W(i,n.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),a=0===r?7:r;switch(n){case"i":return String(a);case"ii":return W(a,n.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return F(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Z(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):W(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):W(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):G(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):Q(e,n)},S:function(e,n){return X(e,n)},X:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return $(a);case"XXXX":case"XX":return K(a);default:return K(a,":")}},x:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return $(a);case"xxxx":case"xx":return K(a);default:return K(a,":")}},O:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+V(a,":");default:return"GMT"+K(a,":")}},z:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+V(a,":");default:return"GMT"+K(a,":")}},t:function(e,n,t,r){var a=r._originalDate||e;return W(Math.floor(a.getTime()/1e3),n.length)},T:function(e,n,t,r){return W((r._originalDate||e).getTime(),n.length)}};function V(e,n){var t=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return t+String(a);var o=n||"";return t+String(a)+o+W(i,2)}function $(e,n){return e%60==0?(e>0?"-":"+")+W(Math.abs(e)/60,2):K(e,n)}function K(e,n){var t=n||"",r=e>0?"-":"+",a=Math.abs(e);return r+W(Math.floor(a/60),2)+t+W(a%60,2)}const ee=J;var ne=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},te=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const re={p:te,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return ne(e,n);switch(a){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",ne(a,n)).replace("{{time}}",te(i,n))}};function ae(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var ie=["D","DD"],oe=["YY","YYYY"];function le(e){return-1!==ie.indexOf(e)}function de(e){return-1!==oe.indexOf(e)}function se(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ue={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ce(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}const me={date:ce({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ce({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ce({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var fe={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Ae(e){return function(n,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=null!=t&&t.width?String(t.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var o=e.defaultWidth,l=null!=t&&t.width?String(t.width):e.defaultWidth;r=e.values[l]||e.values[o]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const pe={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Ae({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Ae({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Ae({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Ae({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Ae({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function he(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=n.match(a);if(!i)return null;var o,l=i[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(d)?Ce(d,(function(e){return e.test(l)})):ge(d,(function(e){return e.test(l)}));o=e.valueCallback?e.valueCallback(s):s,o=t.valueCallback?t.valueCallback(o):o;var u=n.slice(l.length);return{value:o,rest:u}}}function ge(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function Ce(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var ve,ye={ordinalNumber:(ve={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(ve.matchPattern);if(!t)return null;var r=t[0],a=e.match(ve.parsePattern);if(!a)return null;var i=ve.valueCallback?ve.valueCallback(a[0]):a[0];i=n.valueCallback?n.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:he({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:he({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:he({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:he({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:he({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const be={code:"en-US",formatDistance:function(e,n,t){var r,a=ue[e];return r="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:me,formatRelative:function(e,n,t,r){return fe[e]},localize:pe,match:ye,options:{weekStartsOn:0,firstWeekContainsDate:1}};var we=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,xe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Be=/^'([^]*?)'?$/,Ee=/''/g,Ie=/[a-zA-Z]/;function ke(e,n,t){var r,a,i,o,l,d,s,u,c,m,f,A,p,h,g,C,v,y;b(2,arguments);var w=String(n),x=H(),B=null!==(r=null!==(a=null==t?void 0:t.locale)&&void 0!==a?a:x.locale)&&void 0!==r?r:be,T=k(null!==(i=null!==(o=null!==(l=null!==(d=null==t?void 0:t.firstWeekContainsDate)&&void 0!==d?d:null==t||null===(s=t.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==l?l:x.firstWeekContainsDate)&&void 0!==o?o:null===(c=x.locale)||void 0===c||null===(m=c.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var L=k(null!==(f=null!==(A=null!==(p=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(g=t.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==p?p:x.weekStartsOn)&&void 0!==A?A:null===(v=x.locale)||void 0===v||null===(y=v.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==f?f:0);if(!(L>=0&&L<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!B.localize)throw new RangeError("locale must contain localize property");if(!B.formatLong)throw new RangeError("locale must contain formatLong property");var S=E(e);if(!I(S))throw new RangeError("Invalid time value");var D=ae(S),U=M(S,D),z={firstWeekContainsDate:T,weekStartsOn:L,locale:B,_originalDate:S},N=w.match(xe).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,re[n])(e,B.formatLong):e})).join("").match(we).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return Te(r);var i=ee[a];if(i)return null!=t&&t.useAdditionalWeekYearTokens||!de(r)||se(r,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!le(r)||se(r,n,String(e)),i(U,r,B.localize,z);if(a.match(Ie))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("");return N}function Te(e){var n=e.match(Be);return n?n[1].replace(Ee,"'"):e}Math.pow(10,8);var Me=36e5;function Le(e,n){var t;b(1,arguments);var r=k(null!==(t=null==n?void 0:n.additionalDigits)&&void 0!==t?t:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,i=Ne(e);if(i.date){var o=He(i.date,r);a=qe(o.restDateString,o.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var l,d=a.getTime(),s=0;if(i.time&&(s=Ye(i.time),isNaN(s)))return new Date(NaN);if(!i.timezone){var u=new Date(d+s),c=new Date(0);return c.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),c.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),c}return l=We(i.timezone),isNaN(l)?new Date(NaN):new Date(d+s+l)}var Se={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},De=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Ue=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ze=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Ne(e){var n,t={},r=e.split(Se.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?n=r[0]:(t.date=r[0],n=r[1],Se.timeZoneDelimiter.test(t.date)&&(t.date=e.split(Se.timeZoneDelimiter)[0],n=e.substr(t.date.length,e.length))),n){var a=Se.timezone.exec(n);a?(t.time=n.replace(a[1],""),t.timezone=a[1]):t.time=n}return t}function He(e,n){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?a:100*i,restDateString:e.slice((r[1]||r[2]).length)}}function qe(e,n){if(null===n)return new Date(NaN);var t=e.match(De);if(!t)return new Date(NaN);var r=!!t[4],a=Pe(t[1]),i=Pe(t[2])-1,o=Pe(t[3]),l=Pe(t[4]),d=Pe(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,l,d)?function(e,n,t){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(n,l,d):new Date(NaN);var s=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=(_e[n]||(Oe(e)?29:28))}(n,i,o)&&function(e,n){return n>=1&&n<=(Oe(e)?366:365)}(n,a)?(s.setUTCFullYear(n,i,Math.max(a,o)),s):new Date(NaN)}function Pe(e){return e?parseInt(e):1}function Ye(e){var n=e.match(Ue);if(!n)return NaN;var t=je(n[1]),r=je(n[2]),a=je(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,a)?t*Me+6e4*r+1e3*a:NaN}function je(e){return e&&parseFloat(e.replace(",","."))||0}function We(e){if("Z"===e)return 0;var n=e.match(ze);if(!n)return 0;var t="+"===n[1]?-1:1,r=parseInt(n[2]),a=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,a)?t*(r*Me+6e4*a):NaN}var _e=[31,null,31,30,31,30,31,31,30,31,30,31];function Oe(e){return e%400==0||e%4==0&&e%100!=0}function Re(e){return b(1,arguments),E(e).getTime()<Date.now()}function Fe(){localStorage.clear();var e=0;v.forEach((n=>{localStorage.setItem(e,JSON.stringify(n)),e++}))}function Ze(e){const n=document.querySelector(".todo-container");for(var t=0;n.firstChild;)n.removeChild(n.firstChild);e.todos&&e.todos.forEach((e=>{(function(e,n){const t=document.querySelector(".todo-container");let r=document.createElement("div");r.classList.add("todo"),r.id=n;let a=document.createElement("span");a.classList.add("material-symbols-outlined"),a.innerHTML="check_box_outline_blank",a.addEventListener("click",A);let i=document.createElement("span");i.classList.add("material-symbols-outlined"),i.innerHTML="priority_high",i.style.fontSize="20px",f(),i.addEventListener("click",(function(n){1==e.priority?(e.priority=!1,f()):(e.priority=!0,f()),Fe()}));let o=document.createElement("div");o.classList.add("item-text");let l=document.createElement("div");l.innerHTML=e.title,o.appendChild(l),l.addEventListener("click",(n=>{o.removeChild(o.firstChild);var t=document.createElement("input");t.placeholder=e.title,t.type="text",o.appendChild(t);var r=document.createElement("button");r.innerHTML="&#10003;",r.type="submit",o.appendChild(r),r.addEventListener("click",(n=>{o.removeChild(o.firstChild),o.removeChild(o.firstChild),t.value&&(e.title=t.value,Fe()),l.innerHTML=e.title,o.appendChild(l)}))}));let d=document.createElement("div");d.classList.add("item-date");let s=document.createElement("div");s.innerHTML="due "+ke(Le(e.dueDate),"MM/dd/yy"),d.appendChild(s),s.addEventListener("click",(n=>{d.removeChild(d.firstChild);var t=document.createElement("div"),r=document.createElement("input");r.type="date",r.required=!0,r.style.height="20px";var a,i=document.createElement("span");i.classList.add("date_error"),i.classList.add("error"),i.ariaLive="polite",t.appendChild(r),t.appendChild(i),d.appendChild(t),(a=r).addEventListener("input",(e=>{a.setCustomValidity(""),a.validity.valueMissing?a.setCustomvalidity("Please select a due date."):Re(Le(a.value))?a.setCustomValidity("Please select future date."):a.setCustomValidity("")}));var o=document.createElement("button");o.innerHTML="&#10003;",o.type="submit",d.appendChild(o),o.addEventListener("click",(n=>{if(r.validity.valid){for(;d.firstChild;)d.removeChild(d.firstChild);e.dueDate=r.value,Fe(),s.innerHTML="due "+ke(Le(e.dueDate),"MM/dd/yy"),d.appendChild(s)}else i.textContent=r.validationMessage}))}));let u=document.createElement("span");u.classList.add("material-symbols-outlined"),u.innerHTML="chevron_left",u.addEventListener("click",(function(){if("chevron_left"==u.innerHTML){let a=document.createElement("div");if(a.classList.add("item-notes"),a.innerHTML=e.notes,r.appendChild(a),u.innerHTML="expand_more",e.notes)a.addEventListener("click",(n=>{r.removeChild(r.lastChild);var t=document.createElement("input");t.classList.add("item-notes"),t.placeholder=e.notes,t.type="text",r.appendChild(t);var i=document.createElement("button");i.innerHTML="&#10003;",i.type="submit",r.appendChild(i),i.addEventListener("click",(n=>{r.removeChild(r.lastChild),r.removeChild(r.lastChild),t.value&&(e.notes=t.value,Fe()),a.innerHTML=e.notes,r.appendChild(a)}))}));else{var n=document.createElement("input");n.classList.add("item-notes"),n.placeholder="Add notes here...",n.type="text",r.appendChild(n);var t=document.createElement("button");t.innerHTML="&#10003;",t.type="submit",r.appendChild(t),t.addEventListener("click",(t=>{r.removeChild(r.lastChild),r.removeChild(r.lastChild),n.value&&(e.notes=n.value,Fe()),a.innerHTML=e.notes,r.appendChild(a)}))}}else r.removeChild(r.lastChild),u.innerHTML="chevron_left"}));let c=document.createElement("button");c.innerHTML="&times;",c.id="delete-todo",c.addEventListener("click",(function(e){var n=e.target.parentElement;n.style.display="none",function(e){const n=v,t=document.getElementById("current-project").innerHTML;var r;n.forEach((e=>{e.name==t&&(r=e)}));var a=parseInt(e);a>-1&&r.todos.splice(a,1),pushLibrary()}(n.id)})),e.status&&A();var m=document.getElementById("hide-opt");function f(){1==e.priority?(i.style.opacity=1,i.style.color="red",r.style.backgroundColor="rgb(236, 227, 236)"):(i.style.opacity=.5,i.style.color="black",r.style.backgroundColor="rgb(255, 248, 255)")}function A(){"check_box_outline_blank"==a.innerHTML?(a.innerHTML="check_box",r.classList.add("complete"),e.status=!0):(a.innerHTML="check_box_outline_blank",e.status=!1,r.classList.remove("complete")),Fe(),"check_box"==document.getElementById("hide-opt").innerHTML&&(r.style.display="none")}e.status&&"check_box"==m.innerHTML&&(r.style.display="none"),r.appendChild(a),r.appendChild(i),r.appendChild(o),r.appendChild(d),r.appendChild(u),r.appendChild(c),t.appendChild(r)})(e,t),t++}))}function Ge(){let e=document.createElement("div");e.classList.add("nav-container");let n=document.createElement("ul");n.classList.add("project-nav");let t=[];for(var r=0;r<v.length;r++)t[r]=v[r].name;var a;return t.push("+"),a=n,t.forEach((e=>{var n=document.createElement("li"),t=document.createElement("button");t.innerText=e,t.ariaLabel=e,t.ariaSelected=!1,n.appendChild(t),a.appendChild(n)})),n.querySelectorAll("button").forEach((e=>{e.addEventListener("click",(function(n){"+"==e.innerHTML?function(){var e=1,n="";for(v.forEach((e=>{n+=e.name}));n.includes(e.toString());)e++;console.log(e);var t=g("New Project "+e,v);Fe();var r=document.querySelector("#current-project");r&&(r.innerHTML=t.name,Ze(t));let a=document.querySelector(".nav-container");a.removeChild(a.firstChild);let i=Ge();a.appendChild(i),console.log(e)}():function(e){const n=v,t=e.currentTarget.innerHTML,r=document.querySelector("#current-project");var a;n.forEach((e=>{e.name==t&&(a=e)})),r&&(r.innerHTML=t,Ze(a))}(n)}))})),e.appendChild(n),e}const Qe=t.p+"0035c307a36c17babb8d.png";function Xe(e){b(1,arguments);var n=E(e);return n.setHours(0,0,0,0),n}function Je(e,n){b(2,arguments);var t=Xe(e),r=Xe(n);return t.getTime()===r.getTime()}function Ve(e,n,t){this.title=e,this.dueDate=n,this.notes=t,this.priority=!1,this.status=!1}function $e(e){if(!e.validity.valid)return function(e){document.querySelector("."+e.name+"_error").textContent=e.validationMessage}(e),!1;!function(e){document.querySelector("."+e.name+"_error").textContent=""}(e)}var Ke=function(){!function(){if(function(e){let n;try{n=window.localStorage;const e="__storage_test__";return n.setItem(e,e),n.removeItem(e),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&n&&0!==n.length}}()&&0!==localStorage.length){var e=Object.keys(localStorage);e.sort();for(var n=0;n<localStorage.length;n++)y[n]=JSON.parse(localStorage.getItem(e[n]));v=y}}();let e=document.createElement("div");e.classList.add("page");let n=function(){let e=document.createElement("div");e.classList.add("header");const n=v;var t=v[0],r=document.createElement("h1");r.id="current-project",r.innerText=t.name,e.appendChild(r);let a=document.createElement("button");return a.innerHTML="&times;",a.id="delete-proj",e.appendChild(a),a.addEventListener("click",i),r.addEventListener("click",(o=>{var l=r.innerHTML;for(n.forEach((e=>{e.name==l&&(t=e)}));e.firstChild;)e.removeChild(e.firstChild);var d=document.createElement("div");d.classList.add("header-edit");var s=document.createElement("input");s.classList.add("header-input"),s.placeholder=t.name,s.type="text",d.appendChild(s);var u=document.createElement("span");u.classList.add("heading_error"),u.classList.add("error"),u.ariaLive="polite",d.appendChild(u),e.appendChild(d);var c=document.createElement("button");c.innerHTML="&#10003;",c.type="submit",e.appendChild(c),c.addEventListener("click",(o=>{if((l=s).setCustomValidity(""),l.value,n.forEach((e=>{e.name==l.value&&l.setCustomValidity("Please enter a unique project name.")})),s.validity.valid){for(;e.firstChild;)e.removeChild(e.firstChild);s.value&&(t.name=s.value),Fe(),r.innerHTML=t.name,e.appendChild(r),e.appendChild(a),a.addEventListener("click",i)}else u.textContent=s.validationMessage;var l;let d=document.querySelector(".nav-container");d.removeChild(d.firstChild);let c=Ge();d.appendChild(c)}))})),e;function i(){!function(e){const n=v;for(var t,r=0;r<n.length;r++)if(n[r].name==e){t=r;break}t>-1&&n.length>1&&n.splice(t,1),Fe()}(r.innerHTML),t=v[0],r.innerText=t.name,Ze(t);let e=document.querySelector(".nav-container");e.removeChild(e.firstChild);let n=Ge();e.appendChild(n)}}(),t=function(){let e=document.createElement("div");e.classList.add("sidebar");let n=document.createElement("h1");n.innerHTML="To Do<br>List",e.appendChild(n);let t=document.createElement("div");t.classList.add("project-container");let r=Ge();t.appendChild(r),e.appendChild(t);let a=document.createElement("div");a.classList.add("hide-container");let i=document.createElement("span");i.classList.add("material-symbols-outlined"),i.id="hide-opt",i.innerHTML="check_box_outline_blank",i.addEventListener("click",(function(){var e=document.querySelectorAll(".todo");"check_box_outline_blank"==i.innerHTML?(i.innerHTML="check_box",e.forEach((e=>{e.classList.contains("complete")&&(e.style.display="none")}))):(i.innerHTML="check_box_outline_blank",e.forEach((e=>{e.classList.contains("complete")&&(e.style.display="grid")})))}));let o=document.createElement("text");return o.innerHTML="Hide completed tasks",a.appendChild(i),a.appendChild(o),e.appendChild(a),e}(),r=document.createElement("div");r.classList.add("container");let a=document.createElement("div");a.classList.add("todo-header"),["","To Do","Due Date"].forEach((e=>{var n=document.createElement("text");n.innerHTML=e,a.appendChild(n)}));let i=document.createElement("div");i.classList.add("todo-container"),r.appendChild(a),r.appendChild(i);var o=function(e){let n=document.createElement("form");n.classList.add("form-popup","form-todo"),n.noValidate=!0;let t=[];t=e.pop(),e.forEach((e=>{var t=o(e,"todo-input");n.appendChild(t)}));let r=document.createElement("button");r.innerHTML="&times;",r.type="button",r.id="close",r.addEventListener("click",(function(){document.getElementsByClassName("form-todo")[0].style.display="none",document.getElementsByClassName("form-todo")[0].reset()})),n.appendChild(r);var a=o(t,"todo-notes");n.appendChild(a);let i=document.createElement("button");return i.innerHTML="&#10003;",i.type="submit",i.id="submit",n.appendChild(i),n;function o(e,n){var t=document.createElement("div");t.classList.add(n);var r=document.createElement("input");r.autocomplete="off",r.type=e[2],r.id=e[0],r.name=e[0],e[3]&&(r.placeholder=e[3]),r.required=e[4];var a=document.createElement("span");return a.classList.add(e[0]+"_error"),a.classList.add("error"),a.innerHTML="",a.ariaLive="polite",t.appendChild(r),t.appendChild(a),t}}([["title","Do:","text","Do something...",!0],["dueDate","By:","date",!1,!0],["notes","Notes","text","Additional notes",!1]]);r.appendChild(o);let l=document.createElement("div");l.classList.add("add-container");let d=document.createElement("span");d.classList.add("material-symbols-outlined"),d.innerHTML="add_circle",d.addEventListener("click",(function(e){document.querySelector(".form-todo").style.display="grid"})),l.appendChild(d);let s=document.createElement("div");s.classList.add("footer");let u=document.createElement("p");u.innerHTML="Copyright &#169; 2022 sketelone";let c=document.createElement("a"),m=new Image;return m.src=Qe,c.href="https://github.com/sketelone",c.appendChild(m),s.appendChild(c),s.appendChild(u),e.appendChild(n),e.appendChild(t),e.appendChild(r),e.appendChild(l),e.appendChild(s),e}();document.body.appendChild(Ke);const en=document.getElementById("current-project");var nn;v.forEach((e=>{e.name==en.textContent&&(nn=e)})),Ze(nn),function(){const e=document.querySelector(".form-todo"),n=document.getElementById("title"),t=document.getElementById("dueDate"),r=document.getElementById("notes"),a=e.querySelector("#submit"),i=document.querySelectorAll("input"),o=document.getElementById("current-project"),l=v;!function(e){e.addEventListener("input",(n=>{e.setCustomValidity(""),Re(Le(e.value))&&!function(e){return b(1,arguments),Je(e,Date.now())}(Le(e.value))?e.setCustomValidity("Please select future date."):e.setCustomValidity("")}))}(t),i.forEach((e=>{e.addEventListener("input",(n=>{$e(e)}))})),a.addEventListener("click",(function(a){a.preventDefault();var d,s=!0;i.forEach((e=>{0==$e(e)&&(s=!1)})),1==s&&(l.forEach((e=>{e.name==o.textContent&&(d=e)})),function(e,n,t,r){var a=new Ve(e,n,t);r.todos.push(a)}(n.value,t.value,r.value,d),Fe(),Ze(d),e.reset(),e.style.display="none")}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,